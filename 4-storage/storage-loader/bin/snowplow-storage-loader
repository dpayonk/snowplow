#!/usr/bin/env ruby

# Copyright (c) 2012-2013 SnowPlow Analytics Ltd. All rights reserved.
#
# This program is licensed to you under the Apache License Version 2.0,
# and you may not use this file except in compliance with the Apache License Version 2.0.
# You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the Apache License Version 2.0 is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.

# Author::    Alex Dean (mailto:support@snowplowanalytics.com)
# Copyright:: Copyright (c) 2012-2013 SnowPlow Analytics Ltd
# License::   Apache License Version 2.0

# Don't edit $LOAD_PATH, go straight to main Ruby file
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'snowplow-storage-loader'))
loader = SnowPlow::StorageLoader

# This Ruby script runs the SnowPlow StorageLoader.
#
# This is a three-step process:
#
# 1. Download SnowPlow event files from S3 (Infobright only)
# 2. Load SnowPlow event files (either local or remote) into storage target
# 3. Archive event files in S3
begin
  config = loader::Config.get_config()

  # Download files - Infobright only
  unless config[:skip].include?('download')
    if config[:storage][:type] == 'infobright'
      loader::S3Tasks.download_events(config)
    end
  end

  # Delete files - Redshift only
  unless config[:skip].include?('delete')
    if config[:storage][:type] == 'redshift'
      loader::S3Tasks.delete_null_events(config)
    end    
  end

  # If we are not skipping the load, use the appropriate
  # loader for Redshift or Infobright
  unless config[:skip].include?('load')
    case config[:storage][:type]
      when 'redshift'
        loader::RedshiftLoader.load_events(config)
      when 'infobright'
        loader::IceLoader.load_events(config)
    end
  end

  # Archive
  unless config[:skip].include?('archive')
    loader::S3Tasks.archive_events(config)
  end

  puts "Completed successfully"

# Catch any SnowPlow error
rescue loader::Error => e
  $stderr.puts(e.message)
  exit 1
rescue SystemExit => e
  exit 1
rescue Exception => e
  $stderr.puts("Unexpected error: " + e.message)
  $stderr.puts(e.backtrace.join("\n"))
  exit 1
end

exit 0 # Success